-- Script para verificar o status atual da tabela funcionarios
-- Execute este SQL no dashboard do Supabase para diagnosticar problemas

-- 1. Verificar se a tabela funcionarios existe
SELECT 
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'funcionarios') 
    THEN '‚úÖ Tabela funcionarios existe'
    ELSE '‚ùå Tabela funcionarios N√ÉO existe'
  END as tabela_status;

-- 2. Verificar estrutura da tabela funcionarios
SELECT 
  column_name,
  data_type,
  is_nullable,
  column_default
FROM information_schema.columns 
WHERE table_name = 'funcionarios' 
ORDER BY ordinal_position;

-- 3. Verificar se RLS est√° habilitado
SELECT 
  schemaname,
  tablename,
  rowsecurity as rls_enabled,
  CASE 
    WHEN rowsecurity THEN '‚úÖ RLS habilitado'
    ELSE '‚ùå RLS desabilitado'
  END as rls_status
FROM pg_tables 
WHERE tablename = 'funcionarios';

-- 4. Verificar pol√≠ticas RLS existentes
SELECT 
  schemaname,
  tablename,
  policyname,
  permissive,
  roles,
  cmd,
  qual,
  with_check
FROM pg_policies 
WHERE tablename = 'funcionarios'
ORDER BY policyname;

-- 5. Verificar usu√°rio atual e permiss√µes
SELECT 
  auth.uid() as current_user_id,
  CASE 
    WHEN auth.uid() IS NULL THEN '‚ùå Nenhum usu√°rio autenticado'
    ELSE '‚úÖ Usu√°rio autenticado: ' || auth.uid()::text
  END as auth_status;

-- 6. Verificar se usu√°rio atual √© admin
SELECT 
  CASE 
    WHEN auth.uid() IS NULL THEN '‚ùå Nenhum usu√°rio autenticado'
    WHEN EXISTS (
      SELECT 1 FROM public.profiles 
      WHERE user_id = auth.uid() 
      AND papel = 'ADMIN'
    ) THEN '‚úÖ Usu√°rio atual √© ADMIN'
    ELSE '‚ùå Usu√°rio atual N√ÉO √© ADMIN'
  END as admin_status;

-- 7. Verificar perfis de usu√°rios
SELECT 
  p.id,
  p.nome,
  p.papel,
  p.ativo,
  p.user_id,
  CASE 
    WHEN p.user_id = auth.uid() THEN 'üë§ Usu√°rio atual'
    ELSE ''
  END as current_user
FROM public.profiles p
ORDER BY p.papel, p.nome;

-- 8. Verificar funcion√°rios existentes
SELECT 
  f.id,
  f.nome,
  f.email,
  f.cargo,
  f.nivel_acesso,
  f.ativo,
  f.created_at
FROM public.funcionarios f
ORDER BY f.nome;

-- 9. Testar permiss√µes de SELECT
SELECT 
  CASE 
    WHEN auth.uid() IS NULL THEN '‚ùå N√£o pode fazer SELECT (n√£o autenticado)'
    ELSE '‚úÖ Pode fazer SELECT (autenticado)'
  END as select_permission;

-- 10. Testar permiss√µes de INSERT
SELECT 
  CASE 
    WHEN auth.uid() IS NULL THEN '‚ùå N√£o pode fazer INSERT (n√£o autenticado)'
    WHEN NOT EXISTS (
      SELECT 1 FROM public.profiles 
      WHERE user_id = auth.uid() 
      AND papel = 'ADMIN'
    ) THEN '‚ùå N√£o pode fazer INSERT (n√£o √© admin)'
    ELSE '‚úÖ Pode fazer INSERT (√© admin)'
  END as insert_permission;

-- 11. Verificar se a fun√ß√£o is_admin existe
SELECT 
  CASE 
    WHEN EXISTS (
      SELECT 1 FROM information_schema.routines 
      WHERE routine_name = 'is_admin' 
      AND routine_schema = 'public'
    ) THEN '‚úÖ Fun√ß√£o is_admin existe'
    ELSE '‚ùå Fun√ß√£o is_admin N√ÉO existe'
  END as function_status;

-- 12. Verificar triggers na tabela funcionarios
SELECT 
  trigger_name,
  event_manipulation,
  action_timing,
  action_statement
FROM information_schema.triggers 
WHERE event_object_table = 'funcionarios'
ORDER BY trigger_name;

-- 13. Verificar √≠ndices na tabela funcionarios
SELECT 
  indexname,
  indexdef
FROM pg_indexes 
WHERE tablename = 'funcionarios'
ORDER BY indexname;

-- 14. Contar registros em cada tabela relacionada
SELECT 
  'profiles' as tabela,
  COUNT(*) as total_registros
FROM public.profiles
UNION ALL
SELECT 
  'funcionarios' as tabela,
  COUNT(*) as total_registros
FROM public.funcionarios
UNION ALL
SELECT 
  'auth.users' as tabela,
  COUNT(*) as total_registros
FROM auth.users;

-- 15. Verificar √∫ltimos erros de permiss√£o (se houver logs)
-- Nota: Esta query pode n√£o funcionar dependendo das permiss√µes do usu√°rio
SELECT 
  'Verifica√ß√£o de logs de erro n√£o dispon√≠vel para usu√°rios n√£o-admin' as observacao;
